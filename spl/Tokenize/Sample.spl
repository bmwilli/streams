rstring basename(rstring filepath) {
  mutable list<rstring> pathParts = tokenize(filepath,"/",true);
  if (size(pathParts) > 0) {
    return pathParts[size(pathParts) - 1];
  } else {
    return "";
  }
}

composite Sample {

  graph
    stream <rstring filename> DataIn = Custom() {
      logic
        onProcess: {
          submit({filename="/etc/brian-test:2021-wk1:MY$ID1"},DataIn);
          submit({filename="/var/log/brian-details:2021-wk1$My:ID"},DataIn);
          submit({filename="brian-test::MY$ID3"},DataIn);
          submit({filename="./brian-details::MY$ID4"},DataIn);
        }
    }

    stream <rstring filename, rstring indexName, rstring documentId> ParsedData = Custom(DataIn) {
      logic
        state: {
          mutable list<rstring> fileParts;
          mutable rstring indexName = "";
          mutable rstring documentId = "";
        }
        onTuple DataIn: {
          tokenize(basename(filename),":",true,false,fileParts);
          indexName = fileParts[0];
          if (length(fileParts[1]) > 0) {
            indexName = indexName + "-" + fileParts[1];
          }
          if (size(fileParts) > 2) {
            list<rstring> restParts = fileParts[2:];
            documentId = "";
            mutable boolean isFirst = true;
            for (rstring t in restParts) {
              if (isFirst) {
                documentId = t;
                isFirst = false;
              } else {
                documentId = documentId + ":" + t;
              } 
            }
          }
          submit({filename=filename,indexName=indexName,documentId=documentId}, ParsedData);
        }
    }

    () as Sink = Custom(ParsedData as In) {
      logic
        onTuple In: println(In);
    }
}
