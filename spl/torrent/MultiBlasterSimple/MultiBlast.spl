use spl.file::*;

stateful list<uint8> randomBytes(uint32 size) {
  mutable int32 err = 0;
  mutable list<uint8> dataIn = [];
  mutable uint64 f = fopen("/dev/urandom","r",err);
  fread(dataIn, f, (uint64)size, err);
  fclose(f,err);
  return dataIn;
}

composite MultiBlast {
  param
    expression<int32> $flows : (int32)getSubmissionTimeValue("flows","4");
    expression<uint32> $size : (uint32)getSubmissionTimeValue("size","65536");
  graph

    @parallel(width=$flows)
    stream<int32 chan, rstring str> Results = BlastIt(){
      param size : $size;
    }

    () as ResSink = FileSink(Results) {
      param file : instanceID() + "_Blaster.txt";
            flush : 1u;
//      param file : "Blaster_" + "{localtime:%m.%d.%M.%S}" +  ".txt";

    }
}

composite BlastIt (output Results) {
  param
    expression<uint32> $size;
    expression<float64> $duration : (float64)getSubmissionTimeValue("duration","1800"); // seconds
  graph

    stream<list<uint8> data> DataTuple = Custom() {
      logic 
        onProcess: {
          // Create a tuple with string of a certain size
          mutable DataTuple _dataTuple = {};
          _dataTuple.data = randomBytes($size);
          println("_dataTuple.data size = " + (rstring)size(_dataTuple.data));
          // Delay to ensure export connects, hate this!!
          block(10.0);
          submit(_dataTuple,DataTuple);
        }
    }

    ( stream<list<uint8> data> Blast; stream<int32 chan, rstring str> Results ) = Custom(DataTuple) {
      logic
        state: {
          mutable timestamp _ts_begin, _ts_end;
          mutable int32 _size = 0ul;
          mutable uint32 _count = 0u;
          mutable Results _res_tuple = {};
        }
        onTuple DataTuple: {
          _size = size(DataTuple.data);
          _ts_begin = getTimestamp();
          _ts_end = _ts_begin;
          while (diffAsSecs(_ts_end, _ts_begin) < $duration) {
            submit(DataTuple, Blast);
            _count++;
            _ts_end = getTimestamp();
          }
          _res_tuple.chan = getChannel();
          _res_tuple.str = "[sink] Size : " + (rstring)_size + " bytes";
          submit(_res_tuple, Results);
          _res_tuple.str = "[sink] Time : " + (rstring)diffAsSecs(_ts_end, _ts_begin) + " sec";
          submit(_res_tuple, Results);
          _res_tuple.str = "[sink] Count: " + (rstring)_count + " pkt";
          submit(_res_tuple, Results);
          _res_tuple.str = "[sink] Rate : " + (rstring)((float64)_count / diffAsSecs(_ts_end, _ts_begin)) + " pkt/s";
          submit(_res_tuple, Results);
          _res_tuple.str = "[sink] Bandwidth : " + (rstring)((float64)(_count * (uint32)_size * (uint32)8) / diffAsSecs(_ts_end, _ts_begin) / (float64)(1024 * 1024)) + " Mb/s";
          submit(_res_tuple, Results);
        }
      //config placement: hostExlocation("separate" + (rstring)getChannel());
    }

    () as Sink = Custom(Blast) {
      logic
        state: {
          mutable uint32 _count = 0u;
        }
        onTuple Blast: {
          _count++;
        }
      //config placement: hostExlocation("separate" + (rstring)getChannel());
    }

}
